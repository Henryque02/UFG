"""
Para a avalia√ß√£o da solu√ß√£o computacional apresentada, ser√° analisada:  
1.  A organiza√ß√£o da entrada de dados e a organiza√ß√£o da sa√≠da de dados,  
2.  A organiza√ß√£o do c√≥digo-fonte, que precisa ser leg√≠vel e identado,  
3.  A capacidade do programa de realizar dos c√°lculos com a precis√£o da m√°quina e sem 
erros alg√©bricos.
4.  A inexist√™ncia de erros conceituais nos conceitos f√≠sicos e matem√°ticos.
5.  A capacidade do programa de ser adapt√°vel para resolver um problema similar.
6.  As quest√µes devem ser resolvidas integralmente, de acordo com essas instru√ß√µes e os 
respectivos enunciados.  

Os nomes dos participantes do grupo devem estar no cabe√ßalho, como foi apresentado no 
exemplo, na forma de interface com o usu√°rio, que significa imprimir na tela as informa√ß√µes ao 
leitor.  
O uso de instru√ß√µes b√°sicas da linguagem √© recomendado. 
"""
#Organizar v√°riaveis, op√ß√£o de fazer com outros valores, m√°ximo de precis√£o 

print("Exerc√≠cio 4.C6\n\nIntegrantes do grupo:\n\nHenryque Oliveira\nFelipe Gon√ßalves\nFelipe Silva\n")

ExplicandoProblema = """Explicando o problema:\n   O exerc√≠cio apresenta um guindaste que est√° em um plano vertical formando um √¢ngulo ùúô com o plano XY, sustentando uma caixa de 2000 kg. 
Ele √© mantido por uma junta esf√©rica em  A (0,0,0) e por dois cabos conectados nos pontos D (-2 , 0 , 1.5) e E (-2 , 0 , -1.5). 
Com essas informa√ß√µes ele pede para que seja calculada a tens√£o em cada cabo variando os valores de ùúô de 0 a 60¬∞, com incrementos de 5¬∞. 
Tamb√©m pede para determinar o valor de ùúô para o qual a tens√£o em BE √© m√°xima, usando incrementos menores conforme o necess√°rio"""
print(ExplicandoProblema) #Ver se est√° bem explicado

ComoResolver = "\nComo resolver?\nbla bla bla"
print(ComoResolver) #Substituir o texto a cima pela explica√ß√£o de como resolver o problema

#Colocar vari√°veis que ser√£o utilizadas


"""

C√°lculo de tens√µes em cabos BE e DE para um guindaste com carga suspensa.

Descri√ß√£o do Problema:
Este programa calcula as tens√µes nos cabos BE e DE que suportam uma carga suspensa em um guindaste. 
O guindaste √© articulado no ponto A e inclina-se em rela√ß√£o ao plano XY por um √¢ngulo œÜ. O sistema √© 
analisado utilizando princ√≠pios de equil√≠brio est√°tico.

Entradas:
- Massa da carga (kg)
- Comprimento da viga (m)
- Coordenadas dos pontos A, D e E (m)
- Intervalo de √¢ngulos œÜ (em graus) e incrementos desejados
- Lembre-se de inserir apenas os n√∫meros com um (1) espa√ßo

Sa√≠das:
- Tens√µes no cabo BE para cada valor de œÜ
- √Çngulo œÜ onde a tens√£o no cabo BE √© m√°xima

Aplica√ß√µes:
O c√≥digo √© gen√©rico e pode ser utilizado para resolver problemas semelhantes envolvendo guindastes 
ou sistemas de cabos que equilibram uma carga sob for√ßas externas.

"""

"""import numpy as np
from scipy.optimize import fsolve

# === Fun√ß√£o para coletar entradas do usu√°rio ===
def solicitar_parametros():
    print("=== Configura√ß√£o do Sistema ===")
    massa_carga = float(input("Massa da carga (kg): "))
    comprimento_viga = float(input("Comprimento da viga (m): "))

    print("Insira as coordenadas dos pontos (em metros):")
    A = np.array([float(x) for x in input("Coordenadas de A (x, y, z): ").split()])
    D = np.array([float(x) for x in input("Coordenadas de D (x, y, z): ").split()])
    E = np.array([float(x) for x in input("Coordenadas de E (x, y, z): ").split()])
    
    return massa_carga, comprimento_viga, A, D, E

# === Fun√ß√£o para calcular as tens√µes dado um √¢ngulo œÜ ===
def calcular_tensoes(phi_graus, massa_carga, comprimento_viga, A, D, E):
    g = 9.81  # Acelera√ß√£o gravitacional (m/s¬≤)
    peso = massa_carga * g  # Peso da carga (N)

    phi = np.radians(phi_graus)  # Converte œÜ para radianos
    posicao_carga = np.array([
        comprimento_viga * np.cos(phi),  # Coordenada x
        0,                              # Coordenada y
        -comprimento_viga * np.sin(phi) # Coordenada z
    ])

    def equilibrio(tensoes):
        T_BE, T_DE, F_Ax, F_Ay, F_Az = tensoes
        u_BE = (E - posicao_carga) / np.linalg.norm(E - posicao_carga)
        u_DE = (D - posicao_carga) / np.linalg.norm(D - posicao_carga)
        eq1 = F_Ax + T_BE * u_BE[0] + T_DE * u_DE[0]
        eq2 = F_Ay + T_BE * u_BE[1] + T_DE * u_DE[1]
        eq3 = F_Az + T_BE * u_BE[2] + T_DE * u_DE[2] - peso
        momento_BE = np.cross(E, T_BE * u_BE)
        momento_DE = np.cross(D, T_DE * u_DE)
        momento_total = momento_BE + momento_DE
        eq4 = momento_total[0]
        eq5 = momento_total[1]
        return [eq1, eq2, eq3, eq4, eq5]

    palpite_inicial = [1000, 1000, 0, 0, peso]
    solucao = fsolve(equilibrio, palpite_inicial)
    T_BE, T_DE, _, _, _ = solucao
    return T_BE, T_DE

# === Fun√ß√£o principal ===
def main():
    # Coleta os par√¢metros do sistema
    massa_carga, comprimento_viga, A, D, E = solicitar_parametros()

    # Solicita os incrementos de œÜ
    print("=== Configura√ß√£o dos C√°lculos ===")
    phi_min = float(input("√Çngulo inicial œÜ (graus): "))
    phi_max = float(input("√Çngulo final œÜ (graus): "))
    incremento = float(input("Incremento de œÜ (graus): "))

    # Varre os valores de œÜ e calcula as tens√µes
    valores_phi = np.arange(phi_min, phi_max + incremento, incremento)
    tensoes_BE = []

    for phi in valores_phi:
        T_BE, T_DE = calcular_tensoes(phi, massa_carga, comprimento_viga, A, D, E)
        tensoes_BE.append(T_BE)

    # Determina tens√£o m√°xima em BE e √¢ngulo correspondente
    tensoes_BE = np.array(tensoes_BE)
    tensao_maxima = np.max(tensoes_BE)
    phi_otimo = valores_phi[np.argmax(tensoes_BE)]

    # Resultados
    print("\n=== Resultados ===")
    print("√Çngulos œÜ (graus):", valores_phi)
    print("Tens√µes no cabo BE (N):", tensoes_BE)
    print(f"Tens√£o m√°xima no cabo BE: {tensao_maxima:.2f} N no √¢ngulo œÜ = {phi_otimo}¬∞")

# Executa o programa
if _name_ == "_main_":
    main()"""